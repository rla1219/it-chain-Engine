## Database <a name="DB"></a>Blockchain can be stored in multiple types of database depend on configuration. For now leveldbhepler and filehelper functions are added. Basic DB implementation uses leveldb. Blocks can be retrieved by block hash and block number and transaction ID. Transactions can be retrieved by transaction ID.If you want to use other database, implement it under blockchainleveldb and edit blockchain_db_interface.
### Related configDatabase config is defined in config.yaml as database section
- type
  Type of database. For now only leveldb is supported and little helper function for file is supported.
- leveldb
  Configuration for leveldb.
  | key          | description                              |  | ------------ | ---------------------------------------- |  | default_path | If no other path for leveldb is provided, leveldb data is stored in this path |
### World State DBWorld State DB stores final state after all transaction executed. World state DB is copied when running SmartContract.
| DB name              | Key             | Value                  | Description                                                || -------------------- | --------------- | ---------------------- | ---------------------------------------------------------- || WorldStateDB         | UserDefined Key | UserDefined Value      | Save all the information about the result of smartContract || WaitingTransactionDB | Transaction ID  | Serialized Transaction | Save transactions                                          |
### LevelDBBlocks are totally stored in key-value storage leveldb.
- Blocks
  Blocks are serialized to JSON and saved in leveldb. For key block hash and block number are used.  Last block and unconfirmed block are saved for recover.
- Transactions
  Also transactions are serialized and saved in leveldb. Basically all transactions are saved together block.  For indexing, block hash that transaction belongs to also saved. Transaction ID is used for key.
| DB name           | Key            | Value                        | Description                              || ----------------- | -------------- | ---------------------------- | ---------------------------------------- || block_hash        | BlockHash      | Serialized Block             | Save block using blockhash               || block_number      | BlockNumber    | Block Hash                   | Save block using block's number          || transaction       | Transaction ID | Serialized Transaction       | Save transactions                        || unconfirmed_block | BlockHash      | Serialized unconfirmed block | Save unconfirmed block                   || util              | Predefined Key | Depends on Key               | DB for multiple usage                    |
- util DB
  Util DB saves multiple things for convenience.  1) Key : last_block, Value : Serialized last block  2) Key : unconfirmed_block, Value : Serialized unconfirmed block  3) Key : transaction ID, Value : Blockhash of block that transaction is stored
- Snapshot
LevelDB snapshot is added for copying world state db which is stored in leveldb.
### FileBlock's metadata is saved in leveldb or other key-value database. Block body is saved in file.
- Blocks
  Block's metadata is serialized to JSON and saved in leveldb. Block body data is written into file.
- Transactions
  Transaction data is stored in file. For finding, information of the file is stored in key-value database using transaction ID as key.
### Author
[@luke9407](https://github.com/luke9407)
